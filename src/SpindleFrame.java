import ij.IJ;
import ij.ImagePlus;
import ij.Prefs;
import ij.gui.Roi;
import ij.measure.Calibration;
import ij.plugin.Duplicator;
import ij.plugin.ZProjector;
import ij.plugin.filter.ParticleAnalyzer;
import ij.plugin.frame.RoiManager;
import java.io.File;
import java.io.FileWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import loci.plugins.BF;

/**
 *
 * @author lbrod
 */
public class SpindleFrame extends javax.swing.JFrame {
    
    public SpindleFrame() {
        initComponents();
        moreInit();
    }
    public void moreInit(){
        String [] threshold = {"Default dark", "Huang dark", "*Intermodes dark", "IsoData dark", "IJ_IsoData dark", "Li dark", "*MaxEntropy dark", "Mean dark", "MinError dark", "*Minimum dark", "Moments dark", "Otsu dark", "Percentile dark", "*RenyiEntropy dark", "*Shanbhag dark", "Triangle dark", "*Yen dark"};
        jComboBox1.setModel(new DefaultComboBoxModel(threshold));
        jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Process img");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("threshold method");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField1.setText("3");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("mask channel: ");

        jTextField3.setText("25");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("mask size");

        jLabel1.setForeground(new java.awt.Color(0, 150, 255));
        jLabel1.setText("Scale [um/px]: ");
        jLabel1.setToolTipText("Click to use current image scaling. Use value of 1 to measure pixels. ");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jTextField6.setText("1");
        jTextField6.setMaximumSize(new java.awt.Dimension(6, 20));

        jLabel9.setForeground(new java.awt.Color(0, 150, 255));
        jLabel9.setText("z-step [um]:");
        jLabel9.setToolTipText("Click to use current image scaling. Use value of 0 to calculate distance using only xy axis. ");
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jTextField8.setText("1");
        jTextField8.setMaximumSize(new java.awt.Dimension(6, 20));
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jButton2.setText("process all folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("condition");

        jTextField2.setText("default");

        jCheckBox1.setText("manual scale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(jCheckBox1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ImagePlus img = ij.WindowManager.getCurrentImage();
        Roi r[] = getProcessRect(img);
        int coord[] = getCenterPoint(img, r);        
        double scale;
        double zstep;
        if(jCheckBox1.isSelected()){
           scale = Double.parseDouble(jTextField6.getText());
           zstep = Double.parseDouble(jTextField8.getText()); 
        }else{
            Calibration cal = img.getCalibration();
            scale = cal.pixelWidth;
            zstep = cal.pixelDepth;
            jTextField6.setText(""+scale);
            jTextField8.setText(""+zstep);
        }      
        double dist_angle[] = getAngle(coord, scale, zstep);
        
        IJ.log(jTextField2.getText() + "\t" + img.getTitle() + coord[0] +"\t"+ coord[1] +"\t"+ coord[2] +"\t"+ coord[3] +"\t"+ coord[4]+"\t"+ coord[5] +"\t"+ scale +"\t"+ zstep +"\t"+ dist_angle[0] +"\t"+ dist_angle[1] + nl);
        //infos img_name, x1, y1, z1, x2, y2, z2, scale, zstep, distance, angle
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        try{
            Calibration cal = ij.WindowManager.getCurrentImage().getCalibration();
            jTextField6.setText(""+cal.pixelWidth);
        }catch(java.lang.Exception e){
            IJ.log("No image found for calibration");
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        try{
            Calibration cal = ij.WindowManager.getCurrentImage().getCalibration();            
            jTextField8.setText(""+cal.pixelDepth);
        }catch(java.lang.Exception e){
            IJ.log("No image found for calibration");
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    JFileChooser jfc = new JFileChooser();    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(jfc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            processFolder(f.getPath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed
    public File[] listFiles(String path){
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();        
        return listOfFiles;
    }   
    public void processFolder(String path){
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(jfc.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
            String condition = jTextField2.getText();
            File saveFile = jfc.getSelectedFile();
            File[] files = listFiles(path);  
                        
            for(File f : files){
                try{
                    ImagePlus[] imp = BF.openImagePlus(f.getPath()); 
                    doMainProcess(imp[0], condition, saveFile);                       
                }catch(java.lang.Exception e){
                    System.err.println(f.getPath() + " -> " + e.getMessage());
                }            
            }
        }
    }
    
    public void doMainProcess(ImagePlus img, String condition, File saveFile){
        Roi r[] = getProcessRect(img);
        int coord[] = getCenterPoint(img, r);
        double scale;
        double zstep;
        if(jCheckBox1.isSelected()){
           scale = Double.parseDouble(jTextField6.getText());
           zstep = Double.parseDouble(jTextField8.getText()); 
        }else{
            Calibration cal = img.getCalibration();
            scale = cal.pixelWidth;
            zstep = cal.pixelDepth;
            jTextField6.setText(""+scale);
            jTextField8.setText(""+zstep);
        }   
        double dist_angle[] = getAngle(coord, scale, zstep);
        
        try{
            writeToFile(saveFile, condition, img.getTitle(), coord, scale, zstep, dist_angle);
        }catch(java.lang.Exception e){
            System.err.println(e.getMessage());
        }
    }
    String nl =  System.getProperty("line.separator"); 
    String tab = "\t";
    public void writeToFile(File file, String condition, String name, int coord[], double scale, double zstep, double da[]) throws java.io.IOException{
        FileWriter fw;
        if (file.exists()){
            fw = new FileWriter(file.getPath(), true);                 
        }else{
            fw = new FileWriter(file.getPath(), false);
            fw.write("sep=\t"+nl);
            fw.write("condition"+tab+"name"+tab+"x1"+tab+"y1"+tab+"z1"+tab+"x2"+tab+"y2"+tab+"z2"+tab+"scale"+tab+"zstep"+tab+"distance"+tab+"angle"+nl);
            IJ.log("New file created: " + file.getPath());
        }
        fw.write(condition +tab+ name +tab+ coord[0] +tab+ coord[1] +tab+ coord[2] +tab+ coord[3] +tab+ coord[4]+tab+ coord[5] +tab+ scale +tab+ zstep +tab+ da[0] +tab+ da[1] + nl);
        fw.flush();
        fw.close();
    }
    public Roi[] getProcessRect(ImagePlus imp){
        String mask = jComboBox1.getSelectedItem().toString();
        mask = mask.replace("*", "");
        RoiManager rm = RoiManager.getInstance();
        if (rm==null){
            rm = new RoiManager();
            rm.setVisible(true);
        }else{
            while(rm.getCount()>0){ //delete ROIS in roi manager
                rm.select(0);
                rm.runCommand("Delete");
            }
        }

        ImagePlus imp2_sum = ZProjector.run(imp,"sum");
        imp2_sum.show();
        
        int m = Integer.parseInt(jTextField1.getText());
        ImagePlus imp_mask = new Duplicator().run(imp2_sum, m, m, 1, 1, 1, 1);
        imp_mask.show();
        imp_mask.setTitle(imp2_sum.getTitle() + " - ch" + m + " mask_" + mask);           
        IJ.setAutoThreshold(imp_mask, mask);
        Prefs.blackBackground = false;
        IJ.run(imp_mask, "Convert to Mask", ""); 
        
        double min = 35, max = Double.MAX_VALUE;
        /*try{
            if(Double.parseDouble(jTextField5.getText()) >= 0){
                min = Double.parseDouble(jTextField5.getText());
            }
        }catch(java.lang.Exception e){}
        try{
            if(Double.parseDouble(jTextField7.getText()) >= 0){
                max = Double.parseDouble(jTextField7.getText());
            }
        }catch(java.lang.Exception e){}*/
                
        ParticleAnalyzer.setRoiManager(rm);        
        ij.measure.ResultsTable rt = new ij.measure.ResultsTable();
        ParticleAnalyzer.setResultsTable(rt);
        ij.plugin.filter.ParticleAnalyzer pa = new ij.plugin.filter.ParticleAnalyzer(
                    ParticleAnalyzer.ADD_TO_MANAGER+ParticleAnalyzer.SHOW_NONE, 
                    ParticleAnalyzer.SHOW_NONE, rt, min, max);  //min and max size, can also add min and max circularity 
                                                                                                //ParticleAnalyzer(int options, int measurements, ResultsTable rt, double minSize, double maxSize, [optional]double minCirc, [optional]double maxCirc)
        pa.analyze(imp_mask);   
        
                
        //ij.WindowManager.setCurrentWindow(imp2_sum.getWindow());
        imp2_sum.setDisplayMode(IJ.COLOR);

        if(rm.getCount() == 2){
            Roi r01 = rm.getRoi(0);
            Roi r02 = rm.getRoi(1);

            int width = Integer.parseInt(jTextField3.getText());
            int height = Integer.parseInt(jTextField3.getText());
            Roi r1 = new ij.gui.Roi((r01.getBounds().x + (double)r01.getBounds().width/2) - (double)width/2, (r01.getBounds().y + (double)r01.getBounds().height/2) - (double)height/2, width, height);
            Roi r2 = new ij.gui.Roi((r02.getBounds().x + (double)r02.getBounds().width/2) - (double)width/2, (r02.getBounds().y + (double)r02.getBounds().height/2) - (double)height/2, width, height);
        
            /*if(jCheckBox2.isSelected()){
                int x1, x2, y1, y2;
                int offset = Integer.parseInt(jTextField4.getText());
                
                double distancex = (Math.abs((r01.getBounds().x + (double)r01.getBounds().width/2) - (r02.getBounds().x + (double)r02.getBounds().width/2)));
                double distancey = (Math.abs((r01.getBounds().y + (double)r01.getBounds().height/2) - (r02.getBounds().y + (double)r02.getBounds().height/2)));
                double angle = Math.atan(distancey/distancex);
                double offsetX = offset * Math.cos(angle);
                double offsetY = offset * Math.sin(angle);
                
                if(r1.getBounds().x > r2.getBounds().x){ //r1.x > r2.x >> move left
                    x1 = r1.getBounds().x  + (int)(offsetX);
                    x2 = r2.getBounds().x - (int)(offsetX);
                }else{
                    x1 = r1.getBounds().x - (int)(offsetX);
                    x2 = r2.getBounds().x + (int)(offsetX);
                }
                
                if(r1.getBounds().y > r2.getBounds().y){
                    y1 = r1.getBounds().y + (int)(offsetY);
                    y2 = r2.getBounds().y - (int)(offsetY);
                }else{
                    y1 = r1.getBounds().y - (int)(offsetY);
                    y2 = r2.getBounds().y + (int)(offsetY);
                }
                r1 = new ij.gui.Roi(x1, y1, width, height);
                r2 = new ij.gui.Roi(x2, y2, width, height);
            }*/
            
            rm.select(0);
            rm.runCommand("Delete");
            rm.select(0);
            rm.runCommand("Delete");
            
            rm.addRoi(r1);
            rm.addRoi(r2);
            //we got R1 an R2 !!
        }else{
            IJ.log("✘ " + rm.getCount() + " rois in image " + imp2_sum.getTitle());
        }
        
        Roi rois[] = rm.getRoisAsArray();
        try{
            ij.gui.Overlay ovl = new ij.gui.Overlay(rois[0]);
            for(int i=1; i<rois.length; i++){
                ovl.add(rois[i]);
            }
            imp2_sum.setOverlay(ovl); 
        }catch(java.lang.Exception e){}
                              
        //display...        
        imp2_sum.setC(1);
        IJ.run(imp2_sum, "Blue", "");
        imp2_sum.setC(2);
        IJ.run(imp2_sum, "Green", "");
        imp2_sum.setC(3);
        IJ.run(imp2_sum, "Red", "");       
        imp2_sum.setDisplayMode(IJ.COMPOSITE);                        
        imp2_sum.setActiveChannels("111"); //edit to show channels 011
        
        //close images        
        imp_mask.close(); //close mask   
        
        return rm.getRoisAsArray();
    }
    public int[] getCenterPoint(ImagePlus imp, Roi[] r){
        int m = Integer.parseInt(jTextField1.getText());
        int z = imp.getNSlices();
        double mean1[] = new double[z];
        double mean2[] = new double[z];
        
        for(int i=1; i<=z; i++){
            imp.setPosition(m, i, 1);
            Roi r1 = new Roi(r[0].getBounds().x, r[0].getBounds().y, r[0].getBounds().width, r[0].getBounds().height);
            imp.setRoi(r1);
            r1.setPosition(m, i, 1);
             
            mean1[i-1] = imp.getRoi().getStatistics().max; //**mean/max
            
            Roi r2 = new Roi(r[1].getBounds().x, r[1].getBounds().y, r[1].getBounds().width, r[1].getBounds().height);
            imp.setRoi(r2);
            r2.setPosition(m, i, 1);
            mean2[i-1] = imp.getRoi().getStatistics().max; //**mean/max     
        }
        
        int z1 = getMaxIndex(mean1);
        int z2 = getMaxIndex(mean2);
        
        
        int out[] = new int[6]; //x1, y1, z1, x2, y2, z2;
        out[0] = (int)(r[0].getBounds().x + (double)r[0].getBounds().width/2); out[1] = (int)(r[0].getBounds().y + (double)r[0].getBounds().height/2); out[2] = z1;
        out[3] = (int)(r[1].getBounds().x + (double)r[1].getBounds().width/2); out[4] = (int)(r[1].getBounds().y + (double)r[1].getBounds().height/2); out[5] = z2;
        return out;
    }
    
    public int getMaxIndex(double d[]){
        double max = d[0];
        double min = d[0];
        int index = 0;
        for(int i=1; i<d.length; i++){
            if(d[i] >= max){
                max = d[i];
                index = i; // used as max or overriden later when threshold...
            }
            if(d[i]<min){
                min = d[i];
            }
        }
        
        //use threshold... override index
        double thres = min + 0.9 * (double)(max - min); //*** threshold value
        ArrayList<Integer> maxI = new ArrayList();
        for(int i=0; i<d.length; i++){
            if(d[i] > thres){
                maxI.add(i);
            }
        }        
        int sum = 0;
        for(Integer i:maxI){
            sum += i;
        }
        index = (int)((double)sum/maxI.size());
        
        return index+1; //imageJ slices start at 1, java index at 0, easier for user input
    }
    
    public double[] getAngle(int coord[], double scale, double zStep){
        //calculations
            int dx = (int)Math.abs(coord[0] - coord[3]);
            int dy = (int)Math.abs(coord[1] - coord[4]);            
            double dxy = Math.sqrt(dx*dx + dy*dy) * scale; //calc in um       
            double dz = Math.abs(coord[2] - coord[5]) * zStep; //calc in um
            
            double distance = Math.sqrt(dxy*dxy + dz*dz);
            DecimalFormat df = new DecimalFormat("0.000 um");
            IJ.log("Distance = " + df.format(distance));
            
            df = new DecimalFormat("0.00°");
            double angle = Math.toDegrees(Math.atan(dz/dxy));
            IJ.log("Angle = " + df.format(angle));
            
            double out[] = new double[2];
            out[0] = distance;
            out[1] = angle;
            return out;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
